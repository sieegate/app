{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useEffect,useCallback}from\"react\";import{connect}from\"react-redux\";import\"moment/locale/fr\";import moment from\"moment\";import _ from\"lodash\";import View from\"react-native-web/dist/exports/View\";import FlatList from\"react-native-web/dist/exports/FlatList\";import Text from\"react-native-web/dist/exports/Text\";import RefreshControl from\"react-native-web/dist/exports/RefreshControl\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{Icon,Button}from\"react-native-elements\";import theme from\"../../Theme.json\";import{TouchableOpacity}from\"react-native-gesture-handler\";import{fetchJobs as _fetchJobs}from\"../../actions/jobsActions\";var Item=function Item(_ref){var item=_ref.item,navigation=_ref.navigation;return React.createElement(TouchableOpacity,{onPress:function onPress(){return navigation.navigate(\"Read\",{job:item});}},React.createElement(View,{style:{paddingTop:8,paddingHorizontal:20,marginVertical:4,marginHorizontal:0,borderBottomWidth:1,borderBottomColor:theme.colors.grey4,paddingVertical:12,flexDirection:\"row\"}},React.createElement(View,{style:{flex:1}},React.createElement(Text,{style:{textAlignVertical:\"bottom\",fontWeight:\"bold\",fontSize:16}},item==null?void 0:item.jobTitle,\" en \",item==null?void 0:item.employmentType),React.createElement(View,{style:{flexDirection:\"row\",alignItems:\"center\"}},React.createElement(Icon,{name:\"briefcase\",size:20,color:\"grey\"}),React.createElement(Text,{style:{textAlignVertical:\"bottom\",marginStart:8}},item==null?void 0:item.organisation)),React.createElement(View,{style:{flexDirection:\"row\",flex:1,alignItems:\"center\"}},React.createElement(Icon,{name:\"map-marker\",size:20}),React.createElement(Text,{style:{textAlignVertical:\"bottom\",marginStart:8,flex:1}},_.capitalize(item==null?void 0:item.city)),React.createElement(Text,{color:\"grey\",style:{color:\"grey\",fontSize:10,textAlignVertical:\"bottom\"}},_.capitalize(moment(item==null?void 0:item.publishedAt).locale(\"fr\").fromNow()))))));};var JobsListScreen=function JobsListScreen(_ref2){var navigation=_ref2.navigation,fetchJobs=_ref2.fetchJobs,jobs=_ref2.jobs;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),refreshing=_useState2[0],setRefreshing=_useState2[1];useEffect(function(){function fetchData(){fetchJobs();}fetchData();},[]);var onRefresh=useCallback(function(){setRefreshing(true);fetchJobs();setRefreshing(false);},[refreshing]);return React.createElement(View,{style:{flex:1}},jobs.isLoaded?React.createElement(FlatList,{style:{borderRadius:0,shadowOffset:{width:10,height:10},shadowColor:\"black\",shadowOpacity:0.3,elevation:2,backgroundColor:\"white\"},data:jobs.jobs,renderItem:function renderItem(_ref3){var item=_ref3.item;return React.createElement(Item,{item:item,navigation:navigation});},keyExtractor:function keyExtractor(item){return item==null?void 0:item._id;},refreshControl:React.createElement(RefreshControl,{refreshing:refreshing,onRefresh:onRefresh})}):React.createElement(View,{style:{flex:1,alignContent:\"center\",justifyContent:\"center\"}},React.createElement(ActivityIndicator,{size:\"large\"})),React.createElement(Button,{containerStyle:{position:\"absolute\",bottom:0,left:10},buttonStyle:{borderRadius:50},icon:React.createElement(Icon,{name:\"plus\",size:30,color:\"white\"}),onPress:function onPress(){return navigation.navigate(\"Post\");}}));};var mapStateToProps=function mapStateToProps(state){return{auth:state.auth,jobs:state.jobs};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{fetchJobs:function fetchJobs(){return dispatch(_fetchJobs());}};};export default connect(mapStateToProps,mapDispatchToProps)(JobsListScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Jobs/JobsListScreen.js"],"names":["React","useState","useEffect","useCallback","connect","moment","_","Icon","Button","theme","TouchableOpacity","fetchJobs","Item","item","navigation","navigate","job","paddingTop","paddingHorizontal","marginVertical","marginHorizontal","borderBottomWidth","borderBottomColor","colors","grey4","paddingVertical","flexDirection","flex","textAlignVertical","fontWeight","fontSize","jobTitle","employmentType","alignItems","marginStart","organisation","capitalize","city","color","publishedAt","locale","fromNow","JobsListScreen","jobs","refreshing","setRefreshing","fetchData","onRefresh","isLoaded","borderRadius","shadowOffset","width","height","shadowColor","shadowOpacity","elevation","backgroundColor","_id","alignContent","justifyContent","position","bottom","left","mapStateToProps","state","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"moment/locale/fr\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport {\n  View,\n  FlatList,\n  Text,\n  RefreshControl,\n  ActivityIndicator,\n} from \"react-native\";\nimport { Icon, Button } from \"react-native-elements\";\nimport theme from \"../../Theme.json\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { fetchJobs } from \"../../actions/jobsActions\";\n\nconst Item = ({ item, navigation }) => {\n  return (\n    <TouchableOpacity\n      onPress={() =>\n        navigation.navigate(\"Read\", {\n          job: item,\n        })\n      }\n    >\n      <View\n        style={{\n          paddingTop: 8,\n          paddingHorizontal: 20,\n          marginVertical: 4,\n          marginHorizontal: 0,\n          borderBottomWidth: 1,\n          borderBottomColor: theme.colors.grey4,\n          paddingVertical: 12,\n          flexDirection: \"row\",\n        }}\n      >\n        <View style={{ flex: 1 }}>\n          <Text\n            style={{\n              textAlignVertical: \"bottom\",\n              fontWeight: \"bold\",\n              fontSize: 16,\n            }}\n          >\n            {item?.jobTitle} en {item?.employmentType}\n          </Text>\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            <Icon name=\"briefcase\" size={20} color=\"grey\" />\n            <Text style={{ textAlignVertical: \"bottom\", marginStart: 8 }}>\n              {item?.organisation}\n            </Text>\n          </View>\n          <View style={{ flexDirection: \"row\", flex: 1, alignItems: \"center\" }}>\n            <Icon name=\"map-marker\" size={20} />\n            <Text\n              style={{ textAlignVertical: \"bottom\", marginStart: 8, flex: 1 }}\n            >\n              {_.capitalize(item?.city)}\n            </Text>\n            <Text\n              color=\"grey\"\n              style={{\n                color: \"grey\",\n                fontSize: 10,\n                textAlignVertical: \"bottom\",\n              }}\n            >\n              {_.capitalize(moment(item?.publishedAt).locale(\"fr\").fromNow())}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst JobsListScreen = ({ navigation, fetchJobs, jobs }) => {\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    function fetchData() {\n      fetchJobs();\n    }\n    fetchData();\n  }, []);\n\n  const onRefresh = useCallback(() => {\n    setRefreshing(true);\n    fetchJobs();\n    setRefreshing(false);\n  }, [refreshing]);\n\n  return (\n    <View style={{ flex: 1 }}>\n      {jobs.isLoaded ? (\n        <FlatList\n          style={{\n            borderRadius: 0,\n            shadowOffset: { width: 10, height: 10 },\n            shadowColor: \"black\",\n            shadowOpacity: 0.3,\n            elevation: 2,\n            backgroundColor: \"white\",\n          }}\n          data={jobs.jobs}\n          renderItem={({ item }) => (\n            <Item item={item} navigation={navigation} />\n          )}\n          keyExtractor={(item) => item?._id}\n          refreshControl={\n            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n          }\n        />\n      ) : (\n        <View\n          style={{\n            flex: 1,\n            alignContent: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <ActivityIndicator size=\"large\" />\n        </View>\n      )}\n      <Button\n        containerStyle={{\n          position: \"absolute\",\n          bottom: 0,\n          left: 10,\n        }}\n        buttonStyle={{\n          borderRadius: 50,\n        }}\n        icon={<Icon name=\"plus\" size={30} color=\"white\" />}\n        onPress={() => navigation.navigate(\"Post\")}\n      />\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  jobs: state.jobs,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchJobs: () => dispatch(fetchJobs()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobsListScreen);\n"]},"metadata":{},"sourceType":"module"}