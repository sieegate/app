{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useContext,useState,useEffect}from\"react\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import FlatList from\"react-native-web/dist/exports/FlatList\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{useDispatch,useSelector}from\"react-redux\";import{ThemeContext,Button,Icon}from\"react-native-elements\";import{sendPrivateMessage,fetchConversation}from\"../../actions/chatActions\";import _ from\"lodash\";var Message=function Message(_ref){var message=_ref.message,incoming=_ref.incoming,theme=_ref.theme;return React.createElement(View,{style:{flexDirection:\"row\"}},!incoming&&React.createElement(View,{style:{flex:1}}),React.createElement(View,{style:{backgroundColor:incoming?\"white\":theme.colors.primary,borderTopLeftRadius:!incoming?10:0,borderTopRightRadius:10,borderBottomLeftRadius:10,borderBottomRightRadius:incoming?10:0,maxWidth:\"80%\",paddingHorizontal:8,paddingVertical:8,marginBottom:8,marginHorizontal:8}},React.createElement(Text,{style:{color:!incoming?\"white\":\"black\",textAlign:incoming?\"left\":\"right\"}},message.text)),incoming&&React.createElement(View,{style:{flex:1}}));};var RoomScreen=function RoomScreen(_ref2){var route=_ref2.route;var conversation_id=route.params.conversation_id;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),newMessage=_useState2[0],setNewMessage=_useState2[1];var _useContext=useContext(ThemeContext),theme=_useContext.theme;var _useSelector=useSelector(function(state){return state.auth;}),user=_useSelector.user;var conversation=useSelector(function(state){return state.chat.conversations.filter(function(conv){return conv._id===conversation_id;})[0];});var dispatch=useDispatch();useEffect(function(){function fetchData(){dispatch(fetchConversation(conversation_id));}fetchData();},[]);var onSendMessage=function onSendMessage(){var interlocutors=conversation==null?void 0:conversation.participants.filter(function(p){return p._id!=user._id;});dispatch(sendPrivateMessage({text:newMessage,conversation_id:conversation_id,recipient:interlocutors[0]}));setNewMessage(\"\");};return React.createElement(View,{style:{flex:1,justifyContent:\"space-between\"}},(conversation==null?void 0:conversation.messages)?React.createElement(FlatList,{data:conversation.messages,renderItem:function renderItem(_ref3){var item=_ref3.item;return React.createElement(Message,{message:item,incoming:(item==null?void 0:item.sender)!==user._id,theme:theme});},keyExtractor:function keyExtractor(item){return item==null?void 0:item._id;},inverted:true}):React.createElement(ActivityIndicator,null),React.createElement(View,{style:{flexDirection:\"row\",backgroundColor:\"white\",paddingVertical:8,paddingHorizontal:16,alignItems:\"center\",justifyContent:\"center\",alignContent:\"center\"}},React.createElement(TextInput,{style:{height:40,flex:1},onChangeText:function onChangeText(text){return setNewMessage(text);},value:newMessage,multiline:true,placeholder:\"Ecrivez votre message ici.\"}),React.createElement(Button,{icon:React.createElement(Icon,{name:\"send\",size:20,color:newMessage?theme.colors.primary:theme.colors.grey2}),disabled:!newMessage,type:\"clear\",onPress:function onPress(){return onSendMessage();}})));};export default RoomScreen;","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Messages/MessagesRoomScreen.js"],"names":["React","useContext","useState","useEffect","useDispatch","useSelector","ThemeContext","Button","Icon","sendPrivateMessage","fetchConversation","_","Message","message","incoming","theme","flexDirection","flex","backgroundColor","colors","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","maxWidth","paddingHorizontal","paddingVertical","marginBottom","marginHorizontal","color","textAlign","text","RoomScreen","route","conversation_id","params","newMessage","setNewMessage","state","auth","user","conversation","chat","conversations","filter","conv","_id","dispatch","fetchData","onSendMessage","interlocutors","participants","p","recipient","justifyContent","messages","item","sender","alignItems","alignContent","height","grey2"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ThemeContext, Button, Icon } from \"react-native-elements\";\nimport {\n  sendPrivateMessage,\n  fetchConversation,\n} from \"../../actions/chatActions\";\nimport _ from \"lodash\";\n\nconst Message = ({ message, incoming, theme }) => {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n      }}\n    >\n      {!incoming && <View style={{ flex: 1 }}></View>}\n      <View\n        style={{\n          backgroundColor: incoming ? \"white\" : theme.colors.primary,\n          borderTopLeftRadius: !incoming ? 10 : 0,\n          borderTopRightRadius: 10,\n          borderBottomLeftRadius: 10,\n          borderBottomRightRadius: incoming ? 10 : 0,\n          maxWidth: \"80%\",\n          paddingHorizontal: 8,\n          paddingVertical: 8,\n          marginBottom: 8,\n          marginHorizontal: 8,\n        }}\n      >\n        <Text\n          style={{\n            color: !incoming ? \"white\" : \"black\",\n            textAlign: incoming ? \"left\" : \"right\",\n          }}\n        >\n          {message.text}\n        </Text>\n      </View>\n      {incoming && <View style={{ flex: 1 }}></View>}\n    </View>\n  );\n};\n\nconst RoomScreen = ({ route }) => {\n  const { conversation_id } = route.params;\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { theme } = useContext(ThemeContext);\n\n  const { user } = useSelector((state) => state.auth);\n  const conversation = useSelector(\n    (state) =>\n      state.chat.conversations.filter((conv) => conv._id === conversation_id)[0]\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    function fetchData() {\n      dispatch(fetchConversation(conversation_id));\n    }\n    fetchData();\n  }, []);\n\n  const onSendMessage = () => {\n    const interlocutors = conversation?.participants.filter(\n      (p) => p._id != user._id\n    );\n    dispatch(\n      sendPrivateMessage({\n        text: newMessage,\n        conversation_id,\n        recipient: interlocutors[0],\n      })\n    );\n    setNewMessage(\"\");\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n      {conversation?.messages ? (\n        <FlatList\n          data={conversation.messages}\n          renderItem={({ item }) => (\n            <Message\n              message={item}\n              incoming={item?.sender !== user._id}\n              theme={theme}\n            />\n          )}\n          keyExtractor={(item) => item?._id}\n          inverted={true}\n        />\n      ) : (\n        <ActivityIndicator />\n      )}\n      <View\n        style={{\n          flexDirection: \"row\",\n          backgroundColor: \"white\",\n          paddingVertical: 8,\n          paddingHorizontal: 16,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n        }}\n      >\n        <TextInput\n          style={{\n            height: 40,\n            flex: 1,\n          }}\n          onChangeText={(text) => setNewMessage(text)}\n          value={newMessage}\n          multiline\n          placeholder=\"Ecrivez votre message ici.\"\n        />\n        <Button\n          icon={\n            <Icon\n              name=\"send\"\n              size={20}\n              color={newMessage ? theme.colors.primary : theme.colors.grey2}\n            />\n          }\n          disabled={!newMessage}\n          type=\"clear\"\n          onPress={() => onSendMessage()}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default RoomScreen;\n"]},"metadata":{},"sourceType":"module"}