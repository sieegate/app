{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var initialState={conversations:[],conversationsIds:[],interlocutorsIds:[],lastUpdatedAt:null,isLoaded:false,isFetchingConversations:false,isFetchingConversation:false};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"REQUEST_CONVERSATIONS:SUCCESS\":return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,isLoaded:true,isFetchingConversations:false},action.data);case\"REQUEST_CONVERSATION:SUCCESS\":return _objectSpread({},state,{conversations:[action.data].concat(_toConsumableArray(state.conversations.filter(function(c){return c._id!==action.data._id;}))),lastUpdatedAt:action.receivedAt,isLoaded:true});case\"PRIVATE_CONVERSATION_ACK\":case\"RECEIVE_NEW_CONVERSATION\":return _objectSpread({},state,{conversations:[action.conversation].concat(_toConsumableArray(state.conversations)),lastUpdatedAt:action.receivedAt});case\"PRIVATE_MESSAGE_ACK\":case\"RECEIVE_PRIVATE_MESSAGE\":var i=state.conversations.map(function(c){return c._id;}).indexOf(action.message.conversation_id);if(state.conversations[i].messages){return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:[_objectSpread({},state.conversations[i],{lastMessage:action.message,messages:[action.message].concat(_toConsumableArray(state.conversations[i].messages))})].concat(_toConsumableArray(state.conversations.filter(function(conv){return conv._id!==action.message.conversation_id;}))),isLoaded:true});}else{return _objectSpread({},state,{lastUpdatedAt:action.receivedAt,conversations:[_objectSpread({},state.conversations[i],{lastMessage:action.message,messages:[action.message]})].concat(_toConsumableArray(state.conversations.filter(function(conv){return conv._id!==action.message.conversation_id;}))),isLoaded:true});}case\"REQUEST_LOG_OUT:SUCCESS\":return initialState;default:return state;}}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","state","action","type","receivedAt","data","filter","c","_id","conversation","i","map","indexOf","message","conversation_id","messages","lastMessage","conv"],"mappings":"w6BAAA,GAAMA,CAAAA,YAAY,CAAG,CACnBC,aAAa,CAAE,EADI,CAEnBC,gBAAgB,CAAE,EAFC,CAGnBC,gBAAgB,CAAE,EAHC,CAInBC,aAAa,CAAE,IAJI,CAKnBC,QAAQ,CAAE,KALS,CAMnBC,uBAAuB,CAAE,KANN,CAOnBC,sBAAsB,CAAE,KAPL,CAArB,CAUA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBR,YAAsB,IAARS,CAAAA,MAAQ,2CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,+BAAL,CACE,wBACKF,KADL,EAEEJ,aAAa,CAAEK,MAAM,CAACE,UAFxB,CAGEN,QAAQ,CAAE,IAHZ,CAIEC,uBAAuB,CAAE,KAJ3B,EAKKG,MAAM,CAACG,IALZ,EAOF,IAAK,8BAAL,CACE,wBACKJ,KADL,EAEEP,aAAa,EACXQ,MAAM,CAACG,IADI,4BAERJ,KAAK,CAACP,aAAN,CAAoBY,MAApB,CAA2B,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,GAAF,GAAUN,MAAM,CAACG,IAAP,CAAYG,GAA7B,EAA3B,CAFQ,EAFf,CAMEX,aAAa,CAAEK,MAAM,CAACE,UANxB,CAOEN,QAAQ,CAAE,IAPZ,GASF,IAAK,0BAAL,CACA,IAAK,0BAAL,CACE,wBACKG,KADL,EAEEP,aAAa,EAAGQ,MAAM,CAACO,YAAV,4BAA2BR,KAAK,CAACP,aAAjC,EAFf,CAGEG,aAAa,CAAEK,MAAM,CAACE,UAHxB,GAKF,IAAK,qBAAL,CACA,IAAK,yBAAL,CACE,GAAIM,CAAAA,CAAC,CAAGT,KAAK,CAACP,aAAN,CACLiB,GADK,CACD,SAAUJ,CAAV,CAAa,CAChB,MAAOA,CAAAA,CAAC,CAACC,GAAT,CACD,CAHK,EAILI,OAJK,CAIGV,MAAM,CAACW,OAAP,CAAeC,eAJlB,CAAR,CAMA,GAAIb,KAAK,CAACP,aAAN,CAAoBgB,CAApB,EAAuBK,QAA3B,CAAqC,CACnC,wBACKd,KADL,EAEEJ,aAAa,CAAEK,MAAM,CAACE,UAFxB,CAGEV,aAAa,mBAENO,KAAK,CAACP,aAAN,CAAoBgB,CAApB,CAFM,EAGTM,WAAW,CAAEd,MAAM,CAACW,OAHX,CAITE,QAAQ,EAAGb,MAAM,CAACW,OAAV,4BAAsBZ,KAAK,CAACP,aAAN,CAAoBgB,CAApB,EAAuBK,QAA7C,EAJC,8BAMRd,KAAK,CAACP,aAAN,CAAoBY,MAApB,CACD,SAACW,IAAD,QAAUA,CAAAA,IAAI,CAACT,GAAL,GAAaN,MAAM,CAACW,OAAP,CAAeC,eAAtC,EADC,CANQ,EAHf,CAaEhB,QAAQ,CAAE,IAbZ,GAeD,CAhBD,IAgBO,CACL,wBACKG,KADL,EAEEJ,aAAa,CAAEK,MAAM,CAACE,UAFxB,CAGEV,aAAa,mBAENO,KAAK,CAACP,aAAN,CAAoBgB,CAApB,CAFM,EAGTM,WAAW,CAAEd,MAAM,CAACW,OAHX,CAITE,QAAQ,CAAE,CAACb,MAAM,CAACW,OAAR,CAJD,8BAMRZ,KAAK,CAACP,aAAN,CAAoBY,MAApB,CACD,SAACW,IAAD,QAAUA,CAAAA,IAAI,CAACT,GAAL,GAAaN,MAAM,CAACW,OAAP,CAAeC,eAAtC,EADC,CANQ,EAHf,CAaEhB,QAAQ,CAAE,IAbZ,GAeD,CAEH,IAAK,yBAAL,CACE,MAAOL,CAAAA,YAAP,CACF,QACE,MAAOQ,CAAAA,KAAP,CAvEJ,CAyED","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: [\n          action.data,\n          ...state.conversations.filter((c) => c._id !== action.data._id),\n        ],\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      let i = state.conversations\n        .map(function (c) {\n          return c._id;\n        })\n        .indexOf(action.message.conversation_id);\n\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message, ...state.conversations[i].messages],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}