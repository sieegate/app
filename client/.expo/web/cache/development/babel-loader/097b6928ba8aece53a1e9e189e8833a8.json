{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { Provider, useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { store, persistor } from \"./store/index\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { ThemeProvider, Icon } from \"react-native-elements\";\nimport { SplashScreen } from \"expo\";\nimport MyJobs from \"./components/MyJobs\";\nimport Jobs from \"./components/Jobs\";\nimport Profile from \"./components/Profile\";\nimport People from \"./components/People\";\nimport Messages from \"./components/Messages\";\nimport Auth from \"./components/Auth\";\nimport CustomOverlay from \"./components/CustomOverlay\";\nimport theme from \"./Theme.json\";\nimport useLinking from \"./useLinking\";\nimport { navigationRef, isMountedRef } from \"./RootNavigation\";\nimport { verifyToken } from \"./actions/authActions\";\nimport { fetchJobs, fetchMyJobs } from \"./actions/jobsActions\";\nimport { fetchUsers } from \"./actions/usersActions\";\nimport { fetchConversations } from \"./actions/chatActions\";\nvar BottomTab = createBottomTabNavigator();\nvar Drawer = createDrawerNavigator();\nvar Switch = createStackNavigator();\n\nvar MainStack = function MainStack() {\n  return React.createElement(BottomTab.Navigator, {\n    initialRouteName: \"People\",\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          switch (route.name) {\n            case \"Home\":\n              iconName = \"home\";\n              break;\n\n            case \"Jobs\":\n              iconName = \"briefcase\";\n              break;\n\n            case \"People\":\n              iconName = \"account-group\";\n              break;\n\n            case \"Messages\":\n              iconName = \"forum\";\n              break;\n\n            default:\n              break;\n          }\n\n          return React.createElement(Icon, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: theme.colors.primary,\n      inactiveTintColor: \"gray\"\n    }\n  }, React.createElement(BottomTab.Screen, {\n    name: \"People\",\n    component: People,\n    options: {\n      title: \"Annuaire\"\n    }\n  }), React.createElement(BottomTab.Screen, {\n    name: \"Jobs\",\n    component: Jobs,\n    options: {\n      title: \"Emplois\"\n    }\n  }), React.createElement(BottomTab.Screen, {\n    name: \"Messages\",\n    component: Messages,\n    options: {\n      title: \"Messages\"\n    }\n  }));\n};\n\nvar DrawerStack = function DrawerStack() {\n  var dispatch = useDispatch();\n  React.useEffect(function () {\n    function fetchData() {\n      dispatch(fetchJobs());\n      dispatch(fetchMyJobs());\n      dispatch(fetchUsers());\n      dispatch(fetchConversations());\n    }\n\n    fetchData();\n  }, []);\n  return React.createElement(Drawer.Navigator, {\n    initialRouteName: \"Main\",\n    headerMode: \"screen\"\n  }, React.createElement(Drawer.Screen, {\n    name: \"Main\",\n    component: MainStack,\n    options: {\n      title: \"Accueil\"\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Profile\",\n    component: Profile,\n    options: {\n      title: \"Mon profil\"\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"MyJobs\",\n    component: MyJobs,\n    options: {\n      title: \"Mes offres d'emplois\"\n    }\n  }));\n};\n\nvar AppStack = function AppStack(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  var dispatch = useDispatch();\n  var userToken = useSelector(function (state) {\n    return state.auth.token;\n  }, shallowEqual);\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (userToken !== null) {\n                dispatch(verifyToken());\n              }\n\n              _context.prev = 1;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 6:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t2 = _context[\"catch\"](1);\n              console.warn(_context.t2);\n\n            case 13:\n              _context.prev = 13;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(13);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 10, 13, 17]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(NavigationContainer, {\n      ref: navigationRef,\n      initialState: initialNavigationState\n    }, React.createElement(View, {\n      style: {\n        maxWidth: 500,\n        flex: 1\n      }\n    }, React.createElement(Switch.Navigator, {\n      headerMode: \"none\"\n    }, userToken && React.createElement(Switch.Screen, {\n      name: \"Root\",\n      component: DrawerStack\n    }), !userToken && React.createElement(Switch.Screen, {\n      name: \"Auth\",\n      component: Auth\n    })), React.createElement(CustomOverlay, null)));\n  }\n};\n\nvar App = function App() {\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      return isMountedRef.current = false;\n    };\n  }, []);\n  return React.createElement(Provider, {\n    store: store\n  }, React.createElement(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      flexDirection: \"row\",\n      justifyContent: \"center\"\n    }\n  }, Platform.OS === \"ios\" && React.createElement(StatusBar, {\n    barStyle: \"default\"\n  }), React.createElement(AppStack, null)))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/App.js"],"names":["React","Provider","useSelector","shallowEqual","useDispatch","store","persistor","PersistGate","NavigationContainer","createBottomTabNavigator","createStackNavigator","createDrawerNavigator","ThemeProvider","Icon","SplashScreen","MyJobs","Jobs","Profile","People","Messages","Auth","CustomOverlay","theme","useLinking","navigationRef","isMountedRef","verifyToken","fetchJobs","fetchMyJobs","fetchUsers","fetchConversations","BottomTab","Drawer","Switch","MainStack","route","tabBarIcon","focused","color","size","iconName","name","activeTintColor","colors","primary","inactiveTintColor","title","DrawerStack","dispatch","useEffect","fetchData","AppStack","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","userToken","state","auth","token","loadResourcesAndDataAsync","preventAutoHide","console","warn","hide","skipLoadingScreen","maxWidth","flex","App","current","flexDirection","justifyContent","Platform","OS"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Provider, useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { SafeAreaView, Platform, StatusBar, View } from \"react-native\";\nimport { store, persistor } from \"./store/index\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { ThemeProvider, Icon } from \"react-native-elements\";\nimport { SplashScreen } from \"expo\";\n\nimport MyJobs from \"./components/MyJobs\";\nimport Jobs from \"./components/Jobs\";\nimport Profile from \"./components/Profile\";\nimport People from \"./components/People\";\nimport Messages from \"./components/Messages\";\nimport Auth from \"./components/Auth\";\nimport CustomOverlay from \"./components/CustomOverlay\";\n\nimport theme from \"./Theme.json\";\nimport useLinking from \"./useLinking\";\n\nimport { navigationRef, isMountedRef } from \"./RootNavigation\";\n\nimport { verifyToken } from \"./actions/authActions\";\nimport { fetchJobs, fetchMyJobs } from \"./actions/jobsActions\";\nimport { fetchUsers } from \"./actions/usersActions\";\nimport { fetchConversations } from \"./actions/chatActions\";\n\nconst BottomTab = createBottomTabNavigator();\nconst Drawer = createDrawerNavigator();\nconst Switch = createStackNavigator();\n\nconst MainStack = () => {\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"People\"\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          switch (route.name) {\n            case \"Home\":\n              iconName = \"home\";\n              break;\n            case \"Jobs\":\n              iconName = \"briefcase\";\n              break;\n            case \"People\":\n              iconName = \"account-group\";\n              break;\n            case \"Messages\":\n              iconName = \"forum\";\n              break;\n            default:\n              break;\n          }\n\n          return <Icon name={iconName} size={size} color={color} />;\n        },\n      })}\n      tabBarOptions={{\n        activeTintColor: theme.colors.primary,\n        inactiveTintColor: \"gray\",\n      }}\n    >\n      <BottomTab.Screen\n        name=\"People\"\n        component={People}\n        options={{ title: \"Annuaire\" }}\n      />\n      <BottomTab.Screen\n        name=\"Jobs\"\n        component={Jobs}\n        options={{ title: \"Emplois\" }}\n      />\n      <BottomTab.Screen\n        name=\"Messages\"\n        component={Messages}\n        options={{ title: \"Messages\" }}\n      />\n    </BottomTab.Navigator>\n  );\n};\n\nconst DrawerStack = () => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    function fetchData() {\n      dispatch(fetchJobs());\n      dispatch(fetchMyJobs());\n      dispatch(fetchUsers());\n      dispatch(fetchConversations());\n    }\n\n    fetchData();\n  }, []);\n  return (\n    <Drawer.Navigator initialRouteName=\"Main\" headerMode=\"screen\">\n      <Drawer.Screen\n        name=\"Main\"\n        component={MainStack}\n        options={{ title: \"Accueil\" }}\n      />\n      <Drawer.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{ title: \"Mon profil\" }}\n      />\n      <Drawer.Screen\n        name=\"MyJobs\"\n        component={MyJobs}\n        options={{ title: \"Mes offres d'emplois\" }}\n      />\n    </Drawer.Navigator>\n  );\n};\n\nconst AppStack = (props) => {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n  const dispatch = useDispatch();\n\n  const userToken = useSelector((state) => state.auth.token, shallowEqual);\n\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      if (userToken !== null) {\n        dispatch(verifyToken());\n      }\n      try {\n        SplashScreen.preventAutoHide();\n\n        setInitialNavigationState(await getInitialState());\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <NavigationContainer\n        ref={navigationRef}\n        initialState={initialNavigationState}\n      >\n        <View\n          style={{\n            maxWidth: 500,\n            flex: 1,\n          }}\n        >\n          <Switch.Navigator headerMode=\"none\">\n            {userToken && <Switch.Screen name=\"Root\" component={DrawerStack} />}\n            {!userToken && <Switch.Screen name=\"Auth\" component={Auth} />}\n          </Switch.Navigator>\n          <CustomOverlay />\n        </View>\n      </NavigationContainer>\n    );\n  }\n};\n\nconst App = () => {\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => (isMountedRef.current = false);\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <SafeAreaView\n            style={{\n              flex: 1,\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n            <AppStack />\n          </SafeAreaView>\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}