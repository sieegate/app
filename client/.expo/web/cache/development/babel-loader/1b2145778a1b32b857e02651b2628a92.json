{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return _objectSpread({}, state, {\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false\n      }, action.data);\n\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return _objectSpread({}, state, {\n        conversations: [action.data].concat(_toConsumableArray(state.conversations.filter(function (c) {\n          return c._id !== action.data._id;\n        }))),\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true\n      });\n\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return _objectSpread({}, state, {\n        conversations: [action.conversation].concat(_toConsumableArray(state.conversations)),\n        lastUpdatedAt: action.receivedAt\n      });\n\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      var i = state.conversations.map(function (c) {\n        return c._id;\n      }).indexOf(action.message.conversation_id);\n\n      if (state.conversations[i].messages) {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message].concat(_toConsumableArray(state.conversations[i].messages))\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          lastUpdatedAt: action.receivedAt,\n          conversations: [_objectSpread({}, state.conversations[i], {\n            lastMessage: action.message,\n            messages: [action.message]\n          })].concat(_toConsumableArray(state.conversations.filter(function (conv) {\n            return conv._id !== action.message.conversation_id;\n          }))),\n          isLoaded: true\n        });\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/store/reducers/chatReducer.js"],"names":["initialState","conversations","conversationsIds","interlocutorsIds","lastUpdatedAt","isLoaded","isFetchingConversations","isFetchingConversation","state","action","type","receivedAt","data","filter","c","_id","conversation","i","map","indexOf","message","conversation_id","messages","lastMessage","conv"],"mappings":"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","sourcesContent":["const initialState = {\n  conversations: [],\n  conversationsIds: [],\n  interlocutorsIds: [],\n  lastUpdatedAt: null,\n  isLoaded: false,\n  isFetchingConversations: false,\n  isFetchingConversation: false,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"REQUEST_CONVERSATIONS:SUCCESS\":\n      return {\n        ...state,\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n        isFetchingConversations: false,\n        ...action.data,\n      };\n    case \"REQUEST_CONVERSATION:SUCCESS\":\n      return {\n        ...state,\n        conversations: [\n          action.data,\n          ...state.conversations.filter((c) => c._id !== action.data._id),\n        ],\n        lastUpdatedAt: action.receivedAt,\n        isLoaded: true,\n      };\n    case \"PRIVATE_CONVERSATION_ACK\":\n    case \"RECEIVE_NEW_CONVERSATION\":\n      return {\n        ...state,\n        conversations: [action.conversation, ...state.conversations],\n        lastUpdatedAt: action.receivedAt,\n      };\n    case \"PRIVATE_MESSAGE_ACK\":\n    case \"RECEIVE_PRIVATE_MESSAGE\":\n      let i = state.conversations\n        .map(function (c) {\n          return c._id;\n        })\n        .indexOf(action.message.conversation_id);\n\n      if (state.conversations[i].messages) {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message, ...state.conversations[i].messages],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      } else {\n        return {\n          ...state,\n          lastUpdatedAt: action.receivedAt,\n          conversations: [\n            {\n              ...state.conversations[i],\n              lastMessage: action.message,\n              messages: [action.message],\n            },\n            ...state.conversations.filter(\n              (conv) => conv._id !== action.message.conversation_id\n            ),\n          ],\n          isLoaded: true,\n        };\n      }\n\n    case \"REQUEST_LOG_OUT:SUCCESS\":\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}