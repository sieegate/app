{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gaetan/Documents/GATE/app/client/src/components/Jobs/JobsListScreen.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"moment/locale/fr\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Icon, Button } from \"react-native-elements\";\nimport theme from \"../../Theme.json\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { fetchJobs as _fetchJobs } from \"../../actions/jobsActions\";\n\nvar Item = function Item(_ref) {\n  var item = _ref.item,\n      navigation = _ref.navigation;\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Read\", {\n        job: item\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      paddingTop: 8,\n      paddingHorizontal: 20,\n      marginVertical: 4,\n      marginHorizontal: 0,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.grey4,\n      paddingVertical: 12,\n      flexDirection: \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      fontWeight: \"bold\",\n      fontSize: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, item == null ? void 0 : item.jobTitle, \" en \", item == null ? void 0 : item.employmentType), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"briefcase\",\n    size: 20,\n    color: \"grey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      marginStart: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, item == null ? void 0 : item.organisation)), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      flex: 1,\n      alignItems: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"map-marker\",\n    size: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlignVertical: \"bottom\",\n      marginStart: 8,\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, _.capitalize(item == null ? void 0 : item.city)), React.createElement(Text, {\n    color: \"grey\",\n    style: {\n      color: \"grey\",\n      fontSize: 10,\n      textAlignVertical: \"bottom\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, _.capitalize(moment(item == null ? void 0 : item.publishedAt).locale(\"fr\").fromNow()))))));\n};\n\nvar JobsListScreen = function JobsListScreen(_ref2) {\n  var navigation = _ref2.navigation,\n      fetchJobs = _ref2.fetchJobs,\n      jobs = _ref2.jobs;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  useEffect(function () {\n    function fetchData() {\n      fetchJobs();\n    }\n\n    fetchData();\n  }, []);\n  var onRefresh = useCallback(function () {\n    setRefreshing(true);\n    fetchJobs();\n    setRefreshing(false);\n  }, [refreshing]);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, jobs.isLoaded ? React.createElement(FlatList, {\n    style: {\n      borderRadius: 0,\n      shadowOffset: {\n        width: 10,\n        height: 10\n      },\n      shadowColor: \"black\",\n      shadowOpacity: 0.3,\n      elevation: 2,\n      backgroundColor: \"white\"\n    },\n    data: jobs.jobs,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Item, {\n        item: item,\n        navigation: navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item == null ? void 0 : item._id;\n    },\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }) : React.createElement(View, {\n    style: {\n      flex: 1,\n      alignContent: \"center\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), React.createElement(Button, {\n    containerStyle: {\n      position: \"absolute\",\n      bottom: 0,\n      left: 10\n    },\n    buttonStyle: {\n      borderRadius: 50\n    },\n    icon: React.createElement(Icon, {\n      name: \"plus\",\n      size: 30,\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }),\n    onPress: function onPress() {\n      return navigation.navigate(\"Post\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    jobs: state.jobs\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchJobs: function fetchJobs() {\n      return dispatch(_fetchJobs());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobsListScreen);","map":{"version":3,"sources":["/home/gaetan/Documents/GATE/app/client/src/components/Jobs/JobsListScreen.js"],"names":["React","useState","useEffect","useCallback","connect","moment","_","Icon","Button","theme","TouchableOpacity","fetchJobs","Item","item","navigation","navigate","job","paddingTop","paddingHorizontal","marginVertical","marginHorizontal","borderBottomWidth","borderBottomColor","colors","grey4","paddingVertical","flexDirection","flex","textAlignVertical","fontWeight","fontSize","jobTitle","employmentType","alignItems","marginStart","organisation","capitalize","city","color","publishedAt","locale","fromNow","JobsListScreen","jobs","refreshing","setRefreshing","fetchData","onRefresh","isLoaded","borderRadius","shadowOffset","width","height","shadowColor","shadowOpacity","elevation","backgroundColor","_id","alignContent","justifyContent","position","bottom","left","mapStateToProps","state","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"moment/locale/fr\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport {\n  View,\n  FlatList,\n  Text,\n  RefreshControl,\n  ActivityIndicator,\n} from \"react-native\";\nimport { Icon, Button } from \"react-native-elements\";\nimport theme from \"../../Theme.json\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { fetchJobs } from \"../../actions/jobsActions\";\n\nconst Item = ({ item, navigation }) => {\n  return (\n    <TouchableOpacity\n      onPress={() =>\n        navigation.navigate(\"Read\", {\n          job: item,\n        })\n      }\n    >\n      <View\n        style={{\n          paddingTop: 8,\n          paddingHorizontal: 20,\n          marginVertical: 4,\n          marginHorizontal: 0,\n          borderBottomWidth: 1,\n          borderBottomColor: theme.colors.grey4,\n          paddingVertical: 12,\n          flexDirection: \"row\",\n        }}\n      >\n        <View style={{ flex: 1 }}>\n          <Text\n            style={{\n              textAlignVertical: \"bottom\",\n              fontWeight: \"bold\",\n              fontSize: 16,\n            }}\n          >\n            {item?.jobTitle} en {item?.employmentType}\n          </Text>\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            <Icon name=\"briefcase\" size={20} color=\"grey\" />\n            <Text style={{ textAlignVertical: \"bottom\", marginStart: 8 }}>\n              {item?.organisation}\n            </Text>\n          </View>\n          <View style={{ flexDirection: \"row\", flex: 1, alignItems: \"center\" }}>\n            <Icon name=\"map-marker\" size={20} />\n            <Text\n              style={{ textAlignVertical: \"bottom\", marginStart: 8, flex: 1 }}\n            >\n              {_.capitalize(item?.city)}\n            </Text>\n            <Text\n              color=\"grey\"\n              style={{\n                color: \"grey\",\n                fontSize: 10,\n                textAlignVertical: \"bottom\",\n              }}\n            >\n              {_.capitalize(moment(item?.publishedAt).locale(\"fr\").fromNow())}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst JobsListScreen = ({ navigation, fetchJobs, jobs }) => {\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    function fetchData() {\n      fetchJobs();\n    }\n    fetchData();\n  }, []);\n\n  const onRefresh = useCallback(() => {\n    setRefreshing(true);\n    fetchJobs();\n    setRefreshing(false);\n  }, [refreshing]);\n\n  return (\n    <View style={{ flex: 1 }}>\n      {jobs.isLoaded ? (\n        <FlatList\n          style={{\n            borderRadius: 0,\n            shadowOffset: { width: 10, height: 10 },\n            shadowColor: \"black\",\n            shadowOpacity: 0.3,\n            elevation: 2,\n            backgroundColor: \"white\",\n          }}\n          data={jobs.jobs}\n          renderItem={({ item }) => (\n            <Item item={item} navigation={navigation} />\n          )}\n          keyExtractor={(item) => item?._id}\n          refreshControl={\n            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n          }\n        />\n      ) : (\n        <View\n          style={{\n            flex: 1,\n            alignContent: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <ActivityIndicator size=\"large\" />\n        </View>\n      )}\n      <Button\n        containerStyle={{\n          position: \"absolute\",\n          bottom: 0,\n          left: 10,\n        }}\n        buttonStyle={{\n          borderRadius: 50,\n        }}\n        icon={<Icon name=\"plus\" size={30} color=\"white\" />}\n        onPress={() => navigation.navigate(\"Post\")}\n      />\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  jobs: state.jobs,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchJobs: () => dispatch(fetchJobs()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobsListScreen);\n"]},"metadata":{},"sourceType":"module"}